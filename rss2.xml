<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HipHop_&amp;_Coder</title>
    <link>http://blog.hiphopcoder.com/</link>
    
    <atom:link href="http://blog.hiphopcoder.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>喜欢HipHop的程序猿！</description>
    <pubDate>Sun, 11 Apr 2021 04:54:02 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Vim-实用技巧</title>
      <link>http://blog.hiphopcoder.com/2017/3bc10084/</link>
      <guid>http://blog.hiphopcoder.com/2017/3bc10084/</guid>
      <pubDate>Thu, 03 Aug 2017 03:42:46 GMT</pubDate>
      
      <description>Vim 实用技巧
Vim 命令



:help
vim 说明文档的讲解

:h key-notation
vim 说明文档的讲解
vim 键盘映射说明

vim -u NONE -N
vim 恢复出厂设置的启动方式

 * -u NONE 标志让 Vim 在启动时不加载你的 vimrc
 * -N 标志则会使能 ‘nocompatible’ 选 项，防止进入 vi 兼容模式。Vim 解决问题方式
   




 * 结识.命令
    * . 命令可以让我重复上次修改，vim 中的多面手
    * 在normal模式，. 命令可以重复执行上一次的操作命令，根据光标的位置，相当于宏
    * 进入inster 模式后，编辑后退出到normal后 .命令可以重新执行所有的操作
   
   
 * 不要自我重复(组合Vim的命令操作)
   用复合的命令方式操作Vim 提高效率
   
   

复合命令等效命令Cc$S^csclI^iA$aoA&lt;CR&gt;Oko * Vim 可重复操作以及回退
   

目的操作重复按键回退行内查找下一个f{char}/t{char};,行内查找上一</description>
      
      
      
      <content:encoded><![CDATA[<h2><span id="vim-实用技巧">Vim 实用技巧</span></h2><h3><span id="vim-命令">Vim 命令</span></h3><hr><p><code>:help</code><br>vim 说明文档的讲解</p><p><code>:h key-notation</code><br>vim 说明文档的讲解<br>vim 键盘映射说明</p><p><code>vim -u NONE -N</code><br>vim 恢复出厂设置的启动方式</p><ul><li>-u NONE 标志让 Vim 在启动时不加载你的 vimrc</li><li>-N 标志则会使能 ‘nocompatible’ 选 项，防止进入 vi 兼容模式。<span id="more"></span><h3><span id="vim-解决问题方式">Vim 解决问题方式</span></h3></li></ul><hr><ul><li><h4><span id="结识命令">结识<code>.</code>命令</span></h4><ul><li><code>.</code> 命令可以让我重复上次修改，vim 中的多面手</li><li>在<strong>normal</strong>模式，<code>.</code> 命令可以重复执行上一次的操作命令，根据光标的位置，相当于宏</li><li>进入<strong>inster</strong> 模式后，编辑后退出到<strong>normal</strong>后  <code>.</code>命令可以重新执行所有的操作</li></ul></li><li><h4><span id="不要自我重复组合vim的命令操作">不要自我重复(组合Vim的命令操作)</span></h4><p>用复合的命令方式操作Vim 提高效率</p></li></ul><table><thead><tr><th align="center">复合命令</th><th align="center">等效命令</th></tr></thead><tbody><tr><td align="center">C</td><td align="center">c$</td></tr><tr><td align="center">S</td><td align="center">^c</td></tr><tr><td align="center">s</td><td align="center">cl</td></tr><tr><td align="center">I</td><td align="center">^i</td></tr><tr><td align="center">A</td><td align="center">$a</td></tr><tr><td align="center">o</td><td align="center">A&lt;CR&gt;</td></tr><tr><td align="center">O</td><td align="center">ko</td></tr></tbody></table><ul><li><h4><span id="vim-可重复操作以及回退">Vim 可重复操作以及回退</span></h4></li></ul><table><thead><tr><th align="center">目的</th><th align="center">操作</th><th align="center">重复按键</th><th align="center">回退</th></tr></thead><tbody><tr><td align="center">行内查找下一个</td><td align="center">f{char}/t{char}</td><td align="center">;</td><td align="center">,</td></tr><tr><td align="center">行内查找上一个</td><td align="center">F{char}/T{char}</td><td align="center">;</td><td align="center">,</td></tr><tr><td align="center">文档内匹配下一个</td><td align="center">/pattern&lt;CR&gt;</td><td align="center">n</td><td align="center">N</td></tr><tr><td align="center">文档内匹配上一个</td><td align="center">?pattern&lt;CR&gt;</td><td align="center">n</td><td align="center">N</td></tr><tr><td align="center">执行替换</td><td align="center">:s/target/replace</td><td align="center">&amp;</td><td align="center">u</td></tr><tr><td align="center">执行宏修改</td><td align="center">qx{changes}q</td><td align="center">@x</td><td align="center">u</td></tr></tbody></table><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2017/3bc10084/](http://blog.hiphopcoder.com/2017/3bc10084/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Vim/">Vim</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/tools/">tools</category>
      
      
      <comments>http://blog.hiphopcoder.com/2017/3bc10084/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shadowsocks-安装及使用配置</title>
      <link>http://blog.hiphopcoder.com/2017/e50021a2/</link>
      <guid>http://blog.hiphopcoder.com/2017/e50021a2/</guid>
      <pubDate>Wed, 12 Apr 2017 08:37:47 GMT</pubDate>
      
      <description>Shadowsocks 做为翻墙的代理，安装配置使用方便，这里记录下安装配置Shadowsocks 的总结

服务端的安装
首先弄个VPS（境外的）开始安装

Debian / Ubuntu:

apt-get install python-pip
pip install shadowsocks


CentOS:

yum install python-setuptools &amp;&amp; easy_install pip
pip install shadowsocks


Windows:
参考：Github Windows Shadowsocks install

服务启动
 1. 直接启动Shadowsocks 服务
    ssserver -p 端口 -m 密码 -m 加密方式 --user 用户名 -d start
    启动 &amp; 停止
    
    sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start
    sudo ssserver -d stop
    
    
    
 2</description>
      
      
      
      <content:encoded><![CDATA[<p>Shadowsocks 做为翻墙的代理，安装配置使用方便，这里记录下安装配置Shadowsocks 的总结</p><h2><span id="服务端的安装">服务端的安装</span></h2><p>首先弄个VPS（境外的）开始安装</p><p>Debian / Ubuntu:</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure><p>CentOS:</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure><span id="more"></span><p>Windows:<br>参考：<a href="https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows">Github Windows Shadowsocks install</a></p><h2><span id="服务启动">服务启动</span></h2><ol><li><p>直接启动Shadowsocks 服务<br><code>ssserver -p 端口  -m 密码  -m 加密方式 --user 用户名 -d start</code><br>启动 &amp; 停止</p> <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo ssserver -p <span class="number">443</span> -k password -m aes-<span class="number">256</span>-cfb --<span class="keyword">user</span> <span class="title">nobody</span> -d <span class="literal">start</span></span><br><span class="line">sudo ssserver -d <span class="literal">stop</span></span><br></pre></td></tr></table></figure></li><li><p>通过配置文件启动<br>通过创建配置文件的方式代替命令行启动，创建配置文件 <code>/etc/shadowsocks.json</code></p><blockquote><p>配置单一的用户</p></blockquote> <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>:<span class="string">&quot;my_server_ip&quot;</span>,    <span class="comment">#服务器的监听IP</span></span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>:<span class="number">8388</span>,         <span class="comment">#服务器的监听端口</span></span><br><span class="line">    <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,  <span class="comment">#本地的监听IP</span></span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>:<span class="number">1080</span>,             <span class="comment">#本地的监听端口</span></span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;mypassword&quot;</span>,       <span class="comment">#加密的密码</span></span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>:<span class="number">300</span>,                 <span class="comment">#超时设置</span></span><br><span class="line">    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,        <span class="comment">#加密方式设置，默认aes-256-cfb</span></span><br><span class="line">    <span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置多用户</p></blockquote> <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>:<span class="string">&quot;my_server_ip&quot;</span>,    <span class="comment">#服务器的监听IP</span></span><br><span class="line">    <span class="string">&quot;port_password&quot;</span>: &#123;          <span class="comment">#端口： 密码</span></span><br><span class="line">            <span class="string">&quot;8381&quot;</span>: <span class="string">&quot;pwd1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;8382&quot;</span>: <span class="string">&quot;pwd2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,  <span class="comment">#本地的监听IP</span></span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>:<span class="number">1080</span>,             <span class="comment">#本地的监听端口</span></span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>:<span class="number">300</span>,                 <span class="comment">#超时设置</span></span><br><span class="line">    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,        <span class="comment">#加密方式设置，默认aes-256-cfb</span></span><br><span class="line">    <span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 启动 &amp; 停止</p> <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d start</span><br><span class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d stop</span><br></pre></td></tr></table></figure></li></ol><p><code>PS:</code> 参考 <a href="https://github.com/shadowsocks/shadowsocks/wiki">ShadowSocks Github Doc</a></p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2017/e50021a2/](http://blog.hiphopcoder.com/2017/e50021a2/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/%E7%BD%91%E7%BB%9C/">网络</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/shadowsocks/">shadowsocks</category>
      
      
      <comments>http://blog.hiphopcoder.com/2017/e50021a2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker安装启动(Centos7)</title>
      <link>http://blog.hiphopcoder.com/2017/ea3064bf/</link>
      <guid>http://blog.hiphopcoder.com/2017/ea3064bf/</guid>
      <pubDate>Thu, 06 Apr 2017 03:43:27 GMT</pubDate>
      
      <description>在Centos上，Dcoker 针对环境的要求是 Centos7 以上，结合官网，针对Centos7 上Docker 的环境进行下整理 

Docker 分为 CE (社区版) EE (企业版)，这里针对社区版在Censtos7的例子

准备：
 1. 系统要求:Centos7.x86_64
 2. 删除之前的老版本：$ sudo yum remove docker \
                      docker-common \
                      container-selinux \
                      docker-selinux \
                      docker-engine
    or
    $ sudo yum remove docker-ce
    
    
    

安装
 1. 设置Docke 镜像库
    
    $ sudo yum install -y yum-utils
    
    $ sudo yum-config-manager \
      </description>
      
      
      
      <content:encoded><![CDATA[<p>在Centos上，Dcoker 针对环境的要求是 Centos7  以上，结合官网，针对Centos7 上Docker  的环境进行下整理 </p><p>Docker 分为 CE (社区版) EE (企业版)，这里针对社区版在Censtos7的例子</p><h2><span id="准备">准备：</span></h2><ol><li>系统要求:Centos7.x86_64</li><li>删除之前的老版本：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line"><span class="bash">                  docker-common \</span></span><br><span class="line"><span class="bash">                  container-selinux \</span></span><br><span class="line"><span class="bash">                  docker-selinux \</span></span><br><span class="line"><span class="bash">                  docker-engine</span></span><br><span class="line">or</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker-ce</span></span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><h2><span id="安装">安装</span></h2><ol><li><p>设置Docke 镜像库</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    <span class="symbol">https:</span>/<span class="regexp">/download.docker.com/linux</span><span class="regexp">/centos/docker</span>-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>sudo yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装Docker-ce</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y <span class="keyword">install</span> docker-ce</span><br></pre></td></tr></table></figure></li><li><p>启动Docker 服务</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo systemctl <span class="built_in">start</span> docker</span><br><span class="line">or </span><br><span class="line"><span class="variable">$</span> service docker <span class="built_in">start</span></span><br></pre></td></tr></table></figure></li></ol><p> 执行 <code>sudo docker version</code>，出现如下的显示，说明Docker 已经正常启动了</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@localhost</span> <span class="string">~</span>]<span class="comment"># docker version</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Version:</span>      <span class="number">17.03</span><span class="number">.1</span><span class="string">-ce</span></span><br><span class="line"> <span class="attr">API version:</span>  <span class="number">1.27</span></span><br><span class="line"> <span class="attr">Go version:</span>   <span class="string">go1.7.5</span></span><br><span class="line"> <span class="attr">Git commit:</span>   <span class="string">c6d412e</span></span><br><span class="line"> <span class="attr">Built:</span>        <span class="string">Mon</span> <span class="string">Mar</span> <span class="number">27</span> <span class="number">17</span><span class="string">:05:44</span> <span class="number">2017</span></span><br><span class="line"> <span class="attr">OS/Arch:</span>      <span class="string">linux/amd64</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"> <span class="attr">Version:</span>      <span class="number">17.03</span><span class="number">.1</span><span class="string">-ce</span></span><br><span class="line"> <span class="attr">API version:</span>  <span class="number">1.27</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></span><br><span class="line"> <span class="attr">Go version:</span>   <span class="string">go1.7.5</span></span><br><span class="line"> <span class="attr">Git commit:</span>   <span class="string">c6d412e</span></span><br><span class="line"> <span class="attr">Built:</span>        <span class="string">Mon</span> <span class="string">Mar</span> <span class="number">27</span> <span class="number">17</span><span class="string">:05:44</span> <span class="number">2017</span></span><br><span class="line"> <span class="attr">OS/Arch:</span>      <span class="string">linux/amd64</span></span><br><span class="line"> <span class="attr">Experimental:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2><span id="问题总结">问题总结</span></h2><ul><li><p>docker 服务启动失败<br>提示<code>Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.</code></p><ol><li><p>出现这样的情况，是由于Docker Server  没有启动，执行<code>dockerd</code>,看能否启动Docker的守护进程，如果启动失败，说明Docker 安装有问题</p></li><li><p>由于内核原因，Docker必须支持内核版本为<code>3.10.0</code>以上的,请升级系统的内核</p></li></ol></li></ul><p>参考: <a href="https://docs.docker.com/engine/installation/linux/centos/">Docker-Centos-get</a></p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2017/ea3064bf/](http://blog.hiphopcoder.com/2017/ea3064bf/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Docker/">Docker</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/docker/">docker</category>
      
      
      <comments>http://blog.hiphopcoder.com/2017/ea3064bf/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux-免密码远程登录配置</title>
      <link>http://blog.hiphopcoder.com/2017/445f28e5/</link>
      <guid>http://blog.hiphopcoder.com/2017/445f28e5/</guid>
      <pubDate>Fri, 24 Mar 2017 03:08:27 GMT</pubDate>
      
      <description>当执行ssh 远程登录linux服务器的时候需要输入密码，因为ssh 基于ssl 加密协议，所以可通过配置公钥私钥，进行客户端与服务器的配置，达到免密码登录的效果 

生成公钥私钥
 1. 确认客户端已经安装SSH ,执行 ssh-keygen -t rsa ,然后一路回车完成
    公钥，私钥，可以自己定义名字（建议使用不同的后缀名区分不同的公钥私钥）
    

 2. 进入 /root/.ssh/ 目录下可以看到新生成的 id_rsa_remote , idrsa_remote.pub 
    
    
 3. 本地添加私钥
    
    ssh-add ~/.ssh/id_rsa_remote
    
    
    提示添加成功即可 
    
    

部署公钥
把生成的 *.pub 公钥部署到 远程服务器上

 1. 确保远程服务器上SSH 服务器正常
 2. 确保远程登录用户的根目录下，有 .ssh 文件夹，如果没有新建一个
 3. 把你生成的公钥copy 到远程服务器上用户根目录.ssh 文件夹下，并更改文件名为authorized_keys
    </description>
      
      
      
      <content:encoded><![CDATA[<p>当执行ssh 远程登录linux服务器的时候需要输入密码，因为ssh 基于ssl 加密协议，所以可通过配置公钥私钥，进行客户端与服务器的配置，达到免密码登录的效果 </p><h2><span id="生成公钥私钥">生成公钥私钥</span></h2><ol><li>确认客户端已经安装SSH ,执行 <code>ssh-keygen -t rsa</code> ,然后一路回车完成<br>公钥，私钥，可以自己定义名字（建议使用不同的后缀名区分不同的公钥私钥）<br><img src="https://hexo-ali.oss-cn-beijing.aliyuncs.com/linux_rmlogin1.png"></li></ol><span id="more"></span><ol start="2"><li><p>进入 <code>/root/.ssh/</code> 目录下可以看到新生成的 <code>id_rsa_remote ,  idrsa_remote.pub</code> </p></li><li><p>本地添加私钥</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa_remote</span><br></pre></td></tr></table></figure><p>提示添加成功即可  </p></li></ol><h2><span id="部署公钥">部署公钥</span></h2><p>把生成的 *.pub 公钥部署到 远程服务器上</p><ol><li>确保远程服务器上SSH  服务器正常</li><li>确保远程登录用户的根目录下，有 <code>.ssh</code> 文件夹，如果没有新建一个</li><li>把你生成的公钥copy 到远程服务器上用户根目录.ssh 文件夹下，并更改文件名为<code>authorized_keys</code><br><code>Ps:</code>（可以执行如下命令，如果有ssh-copy-id 也行，什么方式无所谓，只要能保证 公钥放入了正确的位置）<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">cat .ssh/id_rsa.pub | ssh root<span class="symbol">@remoteserver</span> <span class="string">&#x27;cat &gt;&gt; .ssh/authorized_keys&#x27;</span></span><br><span class="line"><span class="meta"># or</span></span><br><span class="line">cat .ssh/id_rsa.pub | ssh  -p  port   remoteUser<span class="symbol">@remoteserver</span> <span class="string">&#x27;cat &gt;&gt; .ssh/authorized_keys&#x27;</span></span><br></pre></td></tr></table></figure></li><li>登陆远程主机确认公钥已经放入正确路径，修改文件,文件夹权限  <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">700</span> .ssh</span><br><span class="line"><span class="attribute">chmod</span> <span class="number">640</span> .ssh/authorized_keys</span><br></pre></td></tr></table></figure><h2><span id="连接远程服务器">连接远程服务器</span></h2>这一系列流程操作完成后   <figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">ssh  remoteUser<span class="symbol">@remoteip</span></span><br><span class="line"><span class="meta"># or</span></span><br><span class="line">ssh -p  port  remoteUser<span class="symbol">@remoteip</span></span><br></pre></td></tr></table></figure>之后就可以连接成功了，如果有问题欢迎交流</li></ol><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2017/445f28e5/](http://blog.hiphopcoder.com/2017/445f28e5/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Linux/">Linux</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/linux/">linux</category>
      
      
      <comments>http://blog.hiphopcoder.com/2017/445f28e5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux-tar命令说明</title>
      <link>http://blog.hiphopcoder.com/2017/343cbc01/</link>
      <guid>http://blog.hiphopcoder.com/2017/343cbc01/</guid>
      <pubDate>Thu, 09 Feb 2017 03:34:06 GMT</pubDate>
      
      <description>tar 用于 解压，压缩文件，文件夹

一般的使用方法是：

# 解压
tar -xzvf  XXX.tar.gz
tar -xjvf  xxx.tar.bz2

# 压缩
tar -czvf  XXX.tar.gz   
tar -cjvf  xxx.tar.bz2


一般tar 命令的结构是

tar -主参数 选项 结果文件 目标文件 

tar 参数
 * 主要参数（具体是要进行什么样的操作）
   
   -c 创建
   -x 解压
   -t 浏览
   -k 添加/替换
   -u 更新 
   
   

 * 选项 
   
   -f 后跟文件这个选项必须后面跟随文件，必选
   -v 详细的显示 tar操作后的信息
   -C 指定目录
   -k 针对相同的文件不覆盖
   -m 不使用新的时间戳
   -P 可以使用绝对路径
   -p 保留原版文档的属性
   -exclude 忽略指定的文件 
   
   
 * 文件格式 
   
   -z gzip文档
   -j bzip2文档
   -J xz文档
   -lzma lzma文档 
   
</description>
      
      
      
      <content:encoded><![CDATA[<p>tar  用于 解压，压缩文件，文件夹</p><p>一般的使用方法是：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -xzvf  XXX.tar.gz</span><br><span class="line">tar -xjvf  xxx.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 压缩</span></span><br><span class="line">tar -czvf  XXX.tar.gz   </span><br><span class="line">tar -cjvf  xxx.tar.bz2</span><br></pre></td></tr></table></figure><!-- more  --><p>一般tar 命令的结构是</p><blockquote><p>tar &emsp; -主参数 &emsp;选项  &emsp; 结果文件  &emsp; 目标文件  </p></blockquote><h3><span id="tar-参数">tar 参数</span></h3><ul><li><p>主要参数（具体是要进行什么样的操作）</p><blockquote><p>-c &emsp;   创建<br>   -x &emsp;   解压<br>   -t &emsp;   浏览<br>   -k &emsp;   添加/替换<br>   -u &emsp;   更新   </p></blockquote></li></ul><ul><li><p>选项  </p><blockquote><p>-f &emsp;   后跟文件<code>这个选项必须后面跟随文件，必选</code><br>  -v &emsp;   详细的显示 tar操作后的信息<br>  -C &emsp;   指定目录<br>  -k &emsp;   针对相同的文件不覆盖<br>  -m &emsp;   不使用新的时间戳<br>  -P &emsp;   可以使用绝对路径<br>  -p &emsp;   保留原版文档的属性<br>  -exclude  &emsp; 忽略指定的文件   </p></blockquote></li><li><p>文件格式  </p><blockquote><p>-z &emsp; gzip文档<br>   -j &emsp; bzip2文档<br>   -J &emsp; xz文档<br>   -lzma &emsp; lzma文档    </p></blockquote></li></ul><hr><p>一般使用的时候，也就是根据需要拼接即可</p><h3><span id="demo">Demo</span></h3><ul><li><p> 解压</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">默认解压到当前目录</span><br><span class="line"><span class="variable">tar</span> <span class="operator">-</span><span class="variable">xvf</span>        被解压的文件     </span><br><span class="line"></span><br><span class="line">解压到指定目录</span><br><span class="line"><span class="variable">tar</span> <span class="operator">-</span><span class="variable">xvf</span>        被解压的文件   <span class="operator">-</span><span class="built_in">C</span>   解压到哪里</span><br><span class="line"></span><br><span class="line">解压不同格式文件</span><br><span class="line"><span class="variable">tar</span> <span class="operator">-</span><span class="variable">zxvf</span>       被解压的文件   </span><br></pre></td></tr></table></figure></li><li><p> 压缩</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">压缩指定的目录</span><br><span class="line">tar -cvf       解压后的文件   需要压缩的目录&#x2F;文件     </span><br><span class="line"></span><br><span class="line">解压不同格式文件</span><br><span class="line">tar -zcvf      解压后的文件   </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p> 浏览</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">压缩指定的目录</span><br><span class="line">tar -tvf       压缩文件</span><br></pre></td></tr></table></figure></li></ul><hr><p>具体使用情况，根据需求组合主要参数，选项即可</p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2017/343cbc01/](http://blog.hiphopcoder.com/2017/343cbc01/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Linux/">Linux</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/linux/">linux</category>
      
      
      <comments>http://blog.hiphopcoder.com/2017/343cbc01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vim-配置说明</title>
      <link>http://blog.hiphopcoder.com/2016/cc8c8390/</link>
      <guid>http://blog.hiphopcoder.com/2016/cc8c8390/</guid>
      <pubDate>Fri, 23 Dec 2016 09:49:26 GMT</pubDate>
      
      <description>Vim 堪称为编辑器之神，的确使用起来真的很方便，配置参数如下，详情参见
GitHub

这里主要说下 ‘Vim’ 用到的好的插件

插件
Vundle
Vim 的插件管理工具
GitHub：https://github.com/VundleVim/Vundle.vim/
Vundle 是 vim 的插件管理工具，用于配置Vim的各个插件

molokai
Vim 主题插件
GitHub：http://vimawesome.com/plugin/molokai
molokai 安装好插件之后，Mac/Linux，直接把主题文件放在用户目录下 .vim/colors/，Windows 直接放在vim的安装目录的vimfiles/colors/

airline
Vim 状态栏插件,同样有airlinetheme 主题插件
GitHub：https://github.com/vim-airline/vim-airline
类似powerline 的vim 友好显示的状态栏

tagbar
Vim 跳转定义
GitHub：https://github.com/majutsushi/tagba</description>
      
      
      
      <content:encoded><![CDATA[<p>Vim  堪称为编辑器之神，的确使用起来真的很方便，配置参数如下，详情参见<br><a href="https://github.com/HipHopCoderS/Vim_setting">GitHub</a></p><p>这里主要说下 ‘Vim’ 用到的好的插件</p><h2><span id="插件">插件</span></h2><h4><span id="vundle">Vundle</span></h4><p>Vim 的插件管理工具<br>GitHub：<a href="https://github.com/VundleVim/Vundle.vim/">https://github.com/VundleVim/Vundle.vim/</a><br>Vundle 是 vim 的插件管理工具，用于配置Vim的各个插件</p><span id="more"></span><h4><span id="molokai">molokai</span></h4><p>Vim 主题插件<br>GitHub：<a href="http://vimawesome.com/plugin/molokai">http://vimawesome.com/plugin/molokai</a><br>molokai 安装好插件之后，Mac/Linux，直接把主题文件放在用户目录下 <code>.vim/colors/</code>，Windows 直接放在vim的安装目录的<code>vimfiles/colors/</code></p><h4><span id="airline">airline</span></h4><p>Vim 状态栏插件,同样有airlinetheme 主题插件<br>GitHub：<a href="https://github.com/vim-airline/vim-airline">https://github.com/vim-airline/vim-airline</a><br>类似powerline 的vim 友好显示的状态栏</p><h4><span id="tagbar">tagbar</span></h4><p>Vim 跳转定义<br>GitHub：<a href="https://github.com/majutsushi/tagbar">https://github.com/majutsushi/tagbar</a><br>显示代码定义的方法，并且进行快速的跳转</p><h4><span id="nerdtree">nerdtree</span></h4><p>Vim 目录浏览管理软件<br>GitHub：<a href="https://github.com/scrooloose/nerdtree">https://github.com/scrooloose/nerdtree</a><br>nerdtree,用于目录管理，切换目录，新建文件文件夹，目录移动删除等 方便操作 不二之选</p><h4><span id="vim-multiple-cursors">vim-multiple-cursors</span></h4><p>Vim 多行编辑文本<br>GitHub：<a href="https://github.com/terryma/vim-multiple-cursors">https://github.com/terryma/vim-multiple-cursors</a><br>可以选中多个文本同时进行编辑</p><h4><span id="ctrlpag">Ctrlp,Ag</span></h4><p>Vim 搜索插件<br>GitHub：<a href="https://github.com/kien/ctrlp.vim">https://github.com/kien/ctrlp.vim</a><br>GitHub：<a href="https://github.com/rking/ag.vim">https://github.com/rking/ag.vim</a><br>超级搜索，根据关键字进行搜索</p><h4><span id="fugitive">fugitive</span></h4><p>Vim git插件<br>GitHub：<a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a><br>Vim git 插件辅助</p><h4><span id="indentline">indentline</span></h4><p>Vim 缩进指示线条<br>GitHub： <a href="https://github.com/yggdroot/indentline">https://github.com/yggdroot/indentline</a><br>根据代码层，显示指示线</p><h4><span id="gundo">gundo</span></h4><p>Vim 仿git撤销操作<br>GitHub：<a href="http://vimawesome.com/plugin/gundo">http://vimawesome.com/plugin/gundo</a><br>记录每一步的修改操作，方便条状到任何一次的修改</p><h4><span id="simpyfold">SimpyFold</span></h4><p>Vim 代码折叠功能<br>GitHub：<a href="https://github.com/tmhedberg/simpylfold">https://github.com/tmhedberg/simpylfold</a><br>代码写的太多了 ，折叠起来</p><h4><span id="auto-pairs">auto-pairs</span></h4><p>Vim 自动补全符号<br>GitHub：<a href="https://github.com/chun-yang/auto-pairs">https://github.com/chun-yang/auto-pairs</a><br>自动匹配双符号</p><h4><span id="vim-quickrun">vim-quickrun</span></h4><p>Vim 快速执行代码，支持多种语言<br>GitHub：<a href="http://vimawesome.com/plugin/quicktask">http://vimawesome.com/plugin/quicktask</a><br>快速执行代码，支持多种语言</p><h4><span id="vim-devicons">vim-devicons</span></h4><p>Vim 图标显示，更加的美观<br>GitHub：<a href="http://vimawesome.com/plugin/vim-devicons">http://vimawesome.com/plugin/vim-devicons</a></p><hr><h2><span id="脚本开发的助手">脚本开发的助手</span></h2><h4><span id="youcompleteme">youcompleteme</span></h4><p>Vim 代码自动补全提示，支持多种语言<br>GitHub：<a href="https://github.com/valloric/youcompleteme">https://github.com/valloric/youcompleteme</a></p><h4><span id="vim-ultisnipsvim-snippets">vim-ultisnips,vim-snippets</span></h4><p>Vim 代码片段模板<br>GitHub： <a href="https://github.com/sirver/ultisnips">https://github.com/sirver/ultisnips</a><br>GitHub： <a href="https://github.com/honza/vim-snippets">https://github.com/honza/vim-snippets</a><br>类似的代码模板，提高代码编程效率</p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/cc8c8390/](http://blog.hiphopcoder.com/2016/cc8c8390/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Vim/">Vim</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/tools/">tools</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/cc8c8390/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mac 实用工具整理</title>
      <link>http://blog.hiphopcoder.com/2016/ff3f50f9/</link>
      <guid>http://blog.hiphopcoder.com/2016/ff3f50f9/</guid>
      <pubDate>Tue, 15 Nov 2016 16:00:00 GMT</pubDate>
      
      <description>Iterm2
命令行常用工具：
Iterm2 也是一个终端命令行工具，支持多工作区，使用清爽
http://www.iterm2.com/documentation.html

Solarized
给你的命令行 代码上色
Solarized,支持多种终端工具，代码颜色配套方案
http://ethanschoonover.com/solarized

Synergy
键鼠跨平台共享

Synergy 跨平台共享：
http://synergy-project.org/

Ntfs
mac打开ntfs 格式的移动硬盘 ntsf-mac-免费版
http://www.paragon-drivers.com/cn/ntfs-mac-free/ntfs-free.html?reg_status=ok#down#down

Alfred
Mac系统大管家,提高效率的神奇，可以快速的执行系统操作
https://www.alfredapp.com/

manico/snap
快速启动应用
https://manico.im/
http://www.appinn.com/snap-dock-mac/</description>
      
      
      
      <content:encoded><![CDATA[<h2><span id="iterm2">Iterm2</span></h2><p>命令行常用工具：<br>Iterm2 也是一个终端命令行工具，支持多工作区，使用清爽<br><a href="http://www.iterm2.com/documentation.html">http://www.iterm2.com/documentation.html</a></p><h2><span id="solarized">Solarized</span></h2><p>给你的命令行 代码上色<br>Solarized,支持多种终端工具，代码颜色配套方案<br><a href="http://ethanschoonover.com/solarized">http://ethanschoonover.com/solarized</a></p><h2><span id="synergy">Synergy</span></h2><p>键鼠跨平台共享</p><span id="more"></span><p>Synergy  跨平台共享：<br><a href="http://synergy-project.org/">http://synergy-project.org/</a></p><h2><span id="ntfs">Ntfs</span></h2><p>mac打开ntfs 格式的移动硬盘  ntsf-mac-免费版<br><a href="http://www.paragon-drivers.com/cn/ntfs-mac-free/ntfs-free.html?reg_status=ok#down#down">http://www.paragon-drivers.com/cn/ntfs-mac-free/ntfs-free.html?reg_status=ok#down#down</a></p><h2><span id="alfred">Alfred</span></h2><p>Mac系统大管家,提高效率的神奇，可以快速的执行系统操作<br><a href="https://www.alfredapp.com/">https://www.alfredapp.com/</a></p><h2><span id="manicosnap">manico/snap</span></h2><p>快速启动应用<br><a href="https://manico.im/">https://manico.im/</a><br><a href="http://www.appinn.com/snap-dock-mac/">http://www.appinn.com/snap-dock-mac/</a></p><h2><span id="keyboard-maestro">keyboard Maestro</span></h2><p>键盘操作大本营了，各种键盘操作，各种动作搞定<br><a href="https://www.keyboardmaestro.com/main/">https://www.keyboardmaestro.com/main/</a></p><h2><span id="cheatsheet">CheatSheet</span></h2><p>针对键盘党的福音，忘记某个快捷键操作的时候，快速提示的作用<br><a href="https://www.mediaatelier.com/CheatSheet/">https://www.mediaatelier.com/CheatSheet/</a></p><h2><span id="dash">Dash</span></h2><p>程序员开发最爱，还在到处找Api文档吗？有这个就够了<br><a href="https://kapeli.com/dash">https://kapeli.com/dash</a></p><h2><span id="spectacle">Spectacle</span></h2><p>快速操作应用窗体的大小，位置，布局，最好的是 当你有多个浏览器的时候，快捷键让应用在浏览器直接来回切换 ，谁用谁知道<br><a href="https://github.com/eczarny/spectacle">https://github.com/eczarny/spectacle</a></p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/ff3f50f9/](http://blog.hiphopcoder.com/2016/ff3f50f9/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Mac/">Mac</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/mac/">mac</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/ff3f50f9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Selenium-Webdriver-PageObject</title>
      <link>http://blog.hiphopcoder.com/2016/686a04c5/</link>
      <guid>http://blog.hiphopcoder.com/2016/686a04c5/</guid>
      <pubDate>Mon, 14 Nov 2016 10:16:01 GMT</pubDate>
      
      <description>设计说明
使用Selenium Webdriver 编写UI自动化测试脚本的设计方法非常多，但是大体都分为

 1. 元素定位
    
    
 2. 业务逻辑)
    
    
 3. 断言处理
    
    

这里对WebDriver Python 的Page Objects 设计模式就行下整理，这个模式采用面向对象的思想，把每个页面看作是一个的对象，页面的内的的所有的元素还有业务逻辑都被看作是是属性和方法

class page_name():

  def action1():
    ....

  def action2():
    ....

  def action3():
    ....


设计结构
基本结构分为四层

 * BasePage (封装WebDriver 的基础方法)
 * PageElement (页面对象类)
 * PageLOctors (页面坐标路径)
 * TestCase (测试用例)




Demo
这里拿小米官网的登陆做一个例子

BasePage/BaseDriver.py

# -*- coding:utf-8 </description>
      
      
      
      <content:encoded><![CDATA[<h3><span id="设计说明">设计说明</span></h3><p>使用Selenium Webdriver 编写UI自动化测试脚本的设计方法非常多，但是大体都分为</p><ol><li><p>元素定位</p></li><li><p>业务逻辑)</p></li><li><p>断言处理</p></li></ol><p>这里对WebDriver Python 的Page Objects 设计模式就行下整理，这个模式采用面向对象的思想，把每个页面看作是一个的对象，页面的内的的所有的元素还有业务逻辑都被看作是是属性和方法</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">page_name</span>():</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">action1</span>():</span></span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">action2</span>():</span></span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">action3</span>():</span></span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><h3><span id="设计结构">设计结构</span></h3><p>基本结构分为四层</p><ul><li>BasePage (封装WebDriver 的基础方法)</li><li>PageElement (页面对象类)</li><li>PageLOctors (页面坐标路径)</li><li>TestCase    (测试用例)</li></ul><hr><h3><span id="demo">Demo</span></h3><p>这里拿小米官网的登陆做一个例子</p><p>BasePage/BaseDriver.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># webdriver page object 基础公用方法</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseDriver</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, driver</span>):</span></span><br><span class="line">self.driver = driver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开指定url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_url</span>(<span class="params">self, url, pagetitle</span>):</span></span><br><span class="line">self.driver.get(self.url)</span><br><span class="line">self.driver.maximize_window()</span><br><span class="line"><span class="built_in">print</span> self.driver.title</span><br><span class="line"><span class="keyword">assert</span> self.pagetitle <span class="keyword">in</span> self.driver.title</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据传入坐标,返回元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_element</span>(<span class="params">self, *loc</span>):</span></span><br><span class="line">element = self.driver.find_element(*loc)</span><br><span class="line"><span class="keyword">return</span> element</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据传入坐标,返回所有匹配的元素,返回list</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_elements</span>(<span class="params">self, *loc</span>):</span></span><br><span class="line">elementlist  = self.driver.find_elements(*loc)</span><br><span class="line"><span class="keyword">return</span> elementlist</span><br><span class="line"></span><br><span class="line"><span class="comment"># webdriver 调用selenium 的方法,判断元素是否存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_element_exist</span>(<span class="params">self, *loc</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">self.driver.find_element(*loc)</span><br><span class="line">self.driver.find_elements(*loc)</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">True</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># webdriver 调用selenium 的方法,判断元素是否存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_element_display</span>(<span class="params">self, *loc</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> self.driver.find_element(*loc).is_displayed() <span class="keyword">or</span> self.driver.find_elements(*loc).is_displayed():</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素是否显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_element_display</span>(<span class="params">self, time, *loc</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">WebDriverWait(self.driver, time).until(</span><br><span class="line">EC.presence_of_element_located(*loc))</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">True</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素是否可视</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_element_visible</span>(<span class="params">self, time, *loc</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">WebDriverWait(self.driver, time).until(</span><br><span class="line">EC.visibility_of_element_located(*loc))</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">True</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行js 脚本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_js</span>(<span class="params">self, script</span>):</span></span><br><span class="line">self.driver.execute_script(script)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">refresh_page</span>(<span class="params">self</span>):</span></span><br><span class="line">self.driver.refresh()</span><br></pre></td></tr></table></figure><p>PageElement/login_page.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> BasePage.BaseDriver <span class="keyword">import</span> BaseDriver</span><br><span class="line"><span class="keyword">from</span> PageLoctors.login_page_loc <span class="keyword">import</span> LoginPageLoc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPage</span>(<span class="params">BaseDriver</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,driver</span>):</span></span><br><span class="line">BaseDriver.__init__(self,driver)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_username</span>(<span class="params">self, username</span>):</span></span><br><span class="line"><span class="built_in">print</span> self.get_element(*LoginPageLoc.user)</span><br><span class="line">self.get_element(*LoginPageLoc.user).send_keys(username)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_password</span>(<span class="params">self, password</span>):</span></span><br><span class="line">self.get_element(*LoginPageLoc.password).send_keys(password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_login_button</span>(<span class="params">self</span>):</span></span><br><span class="line">self.get_element(*LoginPageLoc.loginbut).click()</span><br></pre></td></tr></table></figure><p>PageLocotrs/Login_page_loc.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPageLoc</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">user = (By.ID, <span class="string">&quot;username&quot;</span>)</span><br><span class="line">password = (By.ID, <span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">loginbut = (By.ID, <span class="string">&quot;login-button&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TestCase/xiaomi_Test.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> PageElement.login_page <span class="keyword">import</span>  LoginPage</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMiTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">self.driver = webdriver.Chrome()</span><br><span class="line">self.driver.get(<span class="string">&quot;url......&quot;</span>)</span><br><span class="line">self.driver.maximize_window()</span><br><span class="line">self.driver.implicitly_wait(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">self.username = <span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line">self.password = <span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_login</span>(<span class="params">self</span>):</span></span><br><span class="line">loginPage = LoginPage(self.driver)</span><br><span class="line">loginPage.input_username(self.username)</span><br><span class="line">loginPage.input_password(self.password)</span><br><span class="line">loginPage.click_login_button()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3><span id="参考">参考</span></h3><p><a href="%22http://selenium-python.readthedocs.io/page-objects.html%22">官方PageObject 说明</a><br><a href="%22https://github.com/HipHopCoderS/Webdriver_PageObject_Python/tree/master/Webdriver_PO://github.com/HipHopCoderS/Webdriver_PageObject_Python/tree/master/Webdriver_POM%22">github代码</a></p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/686a04c5/](http://blog.hiphopcoder.com/2016/686a04c5/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/SeleniumWebDriver/">SeleniumWebDriver</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/seleniumwebdriver/">seleniumwebdriver</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/686a04c5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python-操作Config文件</title>
      <link>http://blog.hiphopcoder.com/2016/f01f354d/</link>
      <guid>http://blog.hiphopcoder.com/2016/f01f354d/</guid>
      <pubDate>Wed, 07 Sep 2016 06:15:12 GMT</pubDate>
      
      <description>Configparser
Configparser 是Python内置的一个config 文件读写的操作方法
操作具体如下，例如我们的config 文件如下：

[testSection]
testoption = testValue
testbool = true
testfloat = 3.14
testint = 77
testlist = 1,2,3,4,5,6
testoption2 = a,b,c



读取操作
import ConfigParser

conf = ConfigParser.ConfigParser()
conf.read(&quot;./test.conf&quot;)

#  &quot;获取 Boolean 类型&quot;
conf.getboolean(&quot;testSection&quot;, &quot;testBool&quot;)

# &quot;获取 Float 类型&quot;

conf.getfloat(&quot;testSection&quot;, &quot;testFloat&quot;)

# &quot;获取 Int 类型&quot;
conf.getint(&quot;testSection&quot;, &quot;testInt&quot;)

# &quot;判断option是否存在&quot;
conf.has_o</description>
      
      
      
      <content:encoded><![CDATA[<h2><span id="configparser">Configparser</span></h2><p>Configparser 是Python内置的一个config 文件读写的操作方法<br>操作具体如下，例如我们的config 文件如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[testSection]</span><br><span class="line">testoption &#x3D; testValue</span><br><span class="line">testbool &#x3D; true</span><br><span class="line">testfloat &#x3D; 3.14</span><br><span class="line">testint &#x3D; 77</span><br><span class="line">testlist &#x3D; 1,2,3,4,5,6</span><br><span class="line">testoption2 &#x3D; a,b,c</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h4><span id="读取操作">读取操作</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line">conf = ConfigParser.ConfigParser()</span><br><span class="line">conf.read(<span class="string">&quot;./test.conf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  &quot;获取 Boolean 类型&quot;</span></span><br><span class="line">conf.getboolean(<span class="string">&quot;testSection&quot;</span>, <span class="string">&quot;testBool&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;获取 Float 类型&quot;</span></span><br><span class="line"></span><br><span class="line">conf.getfloat(<span class="string">&quot;testSection&quot;</span>, <span class="string">&quot;testFloat&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;获取 Int 类型&quot;</span></span><br><span class="line">conf.getint(<span class="string">&quot;testSection&quot;</span>, <span class="string">&quot;testInt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;判断option是否存在&quot;</span></span><br><span class="line">conf.has_option(<span class="string">&quot;testSection&quot;</span>, <span class="string">&quot;testInt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;判断seciton是否存在&quot;</span></span><br><span class="line">conf.has_section(<span class="string">&quot;testSection&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;获取seciotn 下的键值对,返回list&quot;</span></span><br><span class="line">conf.items(<span class="string">&quot;testSection&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;获取所有的section,返回list&quot;</span></span><br><span class="line">conf.sections()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;获取seciton 下所有的optin,返回list&quot;</span></span><br><span class="line">conf.options(<span class="string">&quot;testSection&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;获取指定Value&quot;</span></span><br><span class="line">conf.get(<span class="string">&quot;testSection&quot;</span>, <span class="string">&quot;testOption&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4><span id="写入操作">写入操作</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line">conf = ConfigParser.ConfigParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件 1,2,3,4,5</span></span><br><span class="line">conf.read(<span class="string">&quot;./test.conf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加section</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> conf.has_section(<span class="string">&quot;testSection&quot;</span>):</span><br><span class="line">conf.add_section(<span class="string">&quot;testSection&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加键值对 #</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;testSection&quot;</span>, <span class="string">&quot;testOption&quot;</span>, <span class="string">&quot;testValue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加键值对List</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line">str_list = <span class="string">&quot;,&quot;</span>.join(<span class="built_in">list</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;testSection&quot;</span>, <span class="string">&quot;testOption2&quot;</span>, str_list )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">conf.write(<span class="built_in">open</span>(<span class="string">&quot;./test.conf&quot;</span>, <span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><h4><span id="demo">Demo</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取config 返回字典对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_config</span>(<span class="params">filepath</span>):</span></span><br><span class="line">section_dic = &#123;&#125;</span><br><span class="line">option_dic =&#123;&#125;</span><br><span class="line">conf = ConfigParser.ConfigParser()</span><br><span class="line">conf.read(filepath)</span><br><span class="line">allsection = conf.sections()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> allsection:</span><br><span class="line">alloption = conf.options(i)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> alloption:</span><br><span class="line">value = conf.get(i, j)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;,&quot;</span> <span class="keyword">in</span> value:</span><br><span class="line">value = value.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">option_dic[j] = value</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">option_dic[j] = value</span><br><span class="line">section_dic[i] = option_dic</span><br><span class="line"><span class="keyword">return</span> section_dic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入config文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_config</span>(<span class="params">filepath, section, option, value</span>):</span></span><br><span class="line">conf = ConfigParser.ConfigParser()</span><br><span class="line">conf.read(filepath)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> conf.has_section(section):</span><br><span class="line">conf.add_section(section)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">strvalue = <span class="string">&quot;,&quot;</span>.join(value)</span><br><span class="line">conf.<span class="built_in">set</span>(section, option, strvalue)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">conf.<span class="built_in">set</span>(section, option, value)</span><br><span class="line">conf.write(<span class="built_in">open</span>(filepath, <span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><hr><h2><span id="configobj">ConfigObj</span></h2><p>第三方的一个Config文件读取操作,对Configparser,也比较方便</p><h4><span id="读取config文件">读取config文件</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  configobj <span class="keyword">import</span> ConfigObj</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取配置文件</span></span><br><span class="line">config =ConfigObj(<span class="string">&quot;./test.conf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取section,下所有的键值对</span></span><br><span class="line">section1 =  config[<span class="string">&quot;testSection&quot;</span>]</span><br><span class="line"><span class="built_in">print</span> section1</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据section 获取对应的值</span></span><br><span class="line">value1 = section1[<span class="string">&quot;testoption&quot;</span>]</span><br><span class="line"><span class="built_in">print</span> value1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">value2 = config[<span class="string">&quot;testSection&quot;</span>][<span class="string">&quot;testoption&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4><span id="写入config-文件">写入Config 文件</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> configobj <span class="keyword">import</span> ConfigObj</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入配置文件</span></span><br><span class="line"></span><br><span class="line">config = ConfigObj(<span class="string">&quot;./test.conf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以没有Section ,直接写option</span></span><br><span class="line">config[<span class="string">&quot;newoption&quot;</span>] = <span class="string">&quot;newvalue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建section ,然后再写入option</span></span><br><span class="line">config[<span class="string">&quot;section1&quot;</span>] = &#123;&#125;</span><br><span class="line">config[<span class="string">&quot;section1&quot;</span>][<span class="string">&quot;option1&quot;</span>] = <span class="string">&quot;value1&quot;</span></span><br><span class="line">config[<span class="string">&quot;section1&quot;</span>][<span class="string">&quot;option2&quot;</span>] = <span class="string">&quot;value2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以创建字典,然后写入config</span></span><br><span class="line">section2 =&#123;</span><br><span class="line"><span class="string">&quot;option1&quot;</span>:<span class="string">&quot;value1&quot;</span>,</span><br><span class="line"><span class="string">&quot;option2&quot;</span>:<span class="string">&quot;value2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">config[<span class="string">&quot;section2&quot;</span>] = section2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接给value  传入list</span></span><br><span class="line">config[<span class="string">&quot;section3&quot;</span>] = &#123;&#125;</span><br><span class="line">config[<span class="string">&quot;section3&quot;</span>][<span class="string">&quot;option1&quot;</span>] = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line"></span><br><span class="line">config.write()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Ps:</code> 参考官方文档 <a href="https://configobj.readthedocs.io/en/latest/index.html">ConfigObl doc_</a></p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/f01f354d/](http://blog.hiphopcoder.com/2016/f01f354d/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Python/">Python</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/python/">python</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/f01f354d/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mysql-Mac安装(brew)</title>
      <link>http://blog.hiphopcoder.com/2016/8ba1655/</link>
      <guid>http://blog.hiphopcoder.com/2016/8ba1655/</guid>
      <pubDate>Wed, 27 Jul 2016 07:08:57 GMT</pubDate>
      
      <description>在Mac上可以直接通过 brew 工具进行安装 

安装Mysql
brew install mysql


等待安装成功会提示信息如下：

We&#39;ve installed your MySQL database without a root password. To secure it run:
    mysql_secure_installation

To connect run:
    mysql -uroot

A &quot;/etc/my.cnf&quot; from another install may interfere with a Homebrew-built
server starting up correctly.

To have launchd start mysql now and restart at login:
  brew services start mysql
Or, if you don&#39;t want/need a background service you can just run:
  mysql.server start






初始化roo</description>
      
      
      
      <content:encoded><![CDATA[<p>在Mac上可以直接通过 <a href="http://brew.sh/">brew</a> 工具进行安装  </p><h2><span id="安装mysql">安装Mysql</span></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><p>等待安装成功会提示信息如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">We&#x27;ve installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">A &quot;/etc/my.cnf&quot; from another install may interfere with a Homebrew-built</span><br><span class="line">server starting up correctly.</span><br><span class="line"></span><br><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure><span id="more"></span>    <br><hr><h2><span id="初始化root-密码">初始化root 密码</span></h2><p><a href="http://brew.sh/">brew</a>安装的mysql初始化是没有密码的，需要我们自定义，首先<code>mysql.server start</code> 启动mysql 的服务，然后执行 <code>mysql_secure_installation</code></p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Securing <span class="keyword">the</span> MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting <span class="built_in">to</span> MySQL <span class="keyword">using</span> <span class="keyword">a</span> blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used <span class="built_in">to</span> test passwords</span><br><span class="line"><span class="keyword">and</span> improve security. It checks <span class="keyword">the</span> strength <span class="keyword">of</span> password</span><br><span class="line"><span class="keyword">and</span> allows <span class="keyword">the</span> users <span class="built_in">to</span> <span class="built_in">set</span> only those passwords which are</span><br><span class="line">secure enough. Would you like <span class="built_in">to</span> setup VALIDATE PASSWORD plugin?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否确认设置密码插件</span></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No: y</span><br><span class="line"></span><br><span class="line">There are <span class="literal">three</span> levels <span class="keyword">of</span> password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= <span class="number">8</span></span><br><span class="line">MEDIUM Length &gt;= <span class="number">8</span>, <span class="keyword">numeric</span>, mixed <span class="keyword">case</span>, <span class="keyword">and</span> special <span class="keyword">characters</span></span><br><span class="line">STRONG Length &gt;= <span class="number">8</span>, <span class="keyword">numeric</span>, mixed <span class="keyword">case</span>, special <span class="keyword">characters</span> <span class="keyword">and</span> dictionary                  <span class="built_in">file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定密码策略</span></span><br><span class="line">Please enter <span class="number">0</span> = LOW, <span class="number">1</span> = MEDIUM <span class="keyword">and</span> <span class="number">2</span> = STRONG: <span class="number">2</span></span><br><span class="line">Please <span class="built_in">set</span> <span class="keyword">the</span> password <span class="keyword">for</span> root here.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入新的密码</span></span><br><span class="line">New password:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新输入新的密码</span></span><br><span class="line">Re-enter <span class="built_in">new</span> password:</span><br><span class="line"></span><br><span class="line">Estimated strength <span class="keyword">of</span> <span class="keyword">the</span> password: <span class="number">100</span></span><br><span class="line">Do you wish <span class="built_in">to</span> continue <span class="keyword">with</span> <span class="keyword">the</span> password provided?(Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : y</span><br><span class="line">By default, <span class="keyword">a</span> MySQL installation has <span class="keyword">an</span> anonymous user,</span><br><span class="line">allowing anyone <span class="built_in">to</span> <span class="built_in">log</span> <span class="keyword">into</span> MySQL <span class="keyword">without</span> having <span class="built_in">to</span> have</span><br><span class="line"><span class="keyword">a</span> user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></span><br><span class="line">testing, <span class="keyword">and</span> <span class="built_in">to</span> make <span class="keyword">the</span> installation go <span class="keyword">a</span> bit smoother.</span><br><span class="line"><span class="comment"># For advice on how to change settings please see</span></span><br><span class="line">You should remove them <span class="keyword">before</span> moving <span class="keyword">into</span> <span class="keyword">a</span> production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否移除任意用户登陆</span></span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed <span class="built_in">to</span> connect <span class="built_in">from</span></span><br><span class="line"><span class="string">&#x27;localhost&#x27;</span>. This ensures that someone cannot guess <span class="keyword">at</span></span><br><span class="line"><span class="keyword">the</span> root password <span class="built_in">from</span> <span class="keyword">the</span> network.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止root 远程登录</span></span><br><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : n</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes <span class="keyword">with</span> <span class="keyword">a</span> database named <span class="string">&#x27;test&#x27;</span> that</span><br><span class="line">anyone can access. This is also intended only <span class="keyword">for</span> testing,</span><br><span class="line"><span class="keyword">and</span> should be removed <span class="keyword">before</span> moving <span class="keyword">into</span> <span class="keyword">a</span> production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除测试数据库</span></span><br><span class="line">Remove test database <span class="keyword">and</span> access <span class="built_in">to</span> <span class="keyword">it</span>? (Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : y</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges <span class="keyword">on</span> <span class="title">test</span> <span class="title">database</span>...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading <span class="keyword">the</span> privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载策略</span></span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br></pre></td></tr></table></figure><p>之后执行<code>mysql -u root -p</code> 回车输入密码即可</p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/8ba1655/](http://blog.hiphopcoder.com/2016/8ba1655/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Mysql/">Mysql</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/mysql/">mysql</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/8ba1655/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mysql-Debian安装&amp;启动mysql</title>
      <link>http://blog.hiphopcoder.com/2016/e09f5f3f/</link>
      <guid>http://blog.hiphopcoder.com/2016/e09f5f3f/</guid>
      <pubDate>Sun, 24 Jul 2016 13:37:59 GMT</pubDate>
      
      <description>Debian 下通过apt-get命令行安装
 1. 同时安装了服务端 ，客户端
    sudo apt-get install mysql-server mysql-client
    
    
 2. 安装过程中会弹出提示窗Configuring myysql-server-x.x
    提示窗提示输入root初始化的密码
    
    
 3. 安装结束后会启动mysql服务，如果没有启动服务那就手动执行
    sudo /etc/init.d/mysql start
    
    

之后执行 mysql -u root -p 输入安装时候设置的密码即可

作者：卡尔西 
本文地址： [http://blog.hiphopcoder.com/2016/e09f5f3f/](http://blog.hiphopcoder.com/2016/e09f5f3f/) 
如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!
但管努力，莫问前程，事在人为，功不唐捐 ~</description>
      
      
      
      <content:encoded><![CDATA[<h2><span id="debian-下通过apt-get命令行安装">Debian 下通过apt-get命令行安装</span></h2><ol><li><p>同时安装了服务端 ，客户端<br><code>sudo apt-get install mysql-server mysql-client</code></p></li><li><p>安装过程中会弹出提示窗<code>Configuring myysql-server-x.x</code><br>提示窗提示输入root初始化的密码</p></li><li><p>安装结束后会启动mysql服务，如果没有启动服务那就手动执行<br><code>sudo  /etc/init.d/mysql start</code></p></li></ol><!--  more--><p>之后执行 <code>mysql -u root -p</code> 输入安装时候设置的密码即可</p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/e09f5f3f/](http://blog.hiphopcoder.com/2016/e09f5f3f/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Mysql/">Mysql</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/mysql/">mysql</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/e09f5f3f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Dock-镜像&amp;容器命令</title>
      <link>http://blog.hiphopcoder.com/2016/8addd63e/</link>
      <guid>http://blog.hiphopcoder.com/2016/8addd63e/</guid>
      <pubDate>Sun, 10 Jul 2016 11:46:02 GMT</pubDate>
      
      <description>Docker 镜像操作&amp;容器操作命令行整理

镜像
 * 获取镜像
   sudo docker pull ImageName 
   
   
 * 查看镜像信息
   sudo docker images
   
   
 * 搜索镜像
   sudo docker search
   
   
 * 删除镜像 
   
   普通删除
   sudo docker rmi ImageID
   sudo docker rmi ImageName:tag 
   
    强行删除镜像
   sudo docker rmi -f ImageID
   sudo docker rmi -f ImageName:tag
   
   

 * 创建镜像 
   
    -a 作者信息
   -m 提交信息
   -p 提交时暂停容器的运行 
   
    基于已有的镜像创建镜像：
   sudo docker commit -m “Commit Message” -a “AuthoName” ContainerID NewImageName
   
   
 * 存出载入镜像 
 </description>
      
      
      
      <content:encoded><![CDATA[<p>Docker 镜像操作&amp;容器操作命令行整理</p><h2><span id="镜像"><code>镜像</code></span></h2><ul><li><p>获取镜像<br>sudo docker pull  ImageName  </p></li><li><p>查看镜像信息<br>sudo docker images</p></li><li><p>搜索镜像<br>sudo docker search</p><span id="more"></span></li><li><p>删除镜像  </p><p>普通删除<br>  sudo docker rmi  ImageID<br>  sudo docker rmi  ImageName:tag  </p><p>  强行删除镜像<br>  sudo docker rmi -f ImageID<br>  sudo docker rmi  -f  ImageName:tag</p></li></ul><ul><li><p>创建镜像  </p><p> -a  作者信息<br> -m  提交信息<br> -p  提交时暂停容器的运行  </p><p>  基于已有的镜像创建镜像：<br> sudo docker commit  -m  “Commit  Message”  -a  “AuthoName”  ContainerID   NewImageName</p></li><li><p>存出载入镜像  </p><p>  存出镜像：<br>  sudo docker save -o  saveName.tar  ImageName:tag  </p><p>  载入镜像：<br>  sudo docker load –input  DockerTarFile<br>  or<br>  sudo docker load &lt; DockerTarFile</p></li></ul><ul><li>上传镜像<br> sudo docker push  ImageName:tag  </li></ul><h2><span id="容器"><code>容器</code></span></h2><ul><li><p>创建容器  </p><p> 新建容器<br> sudo docker create -it ImageName:tag</p><p> 新建并启动容器<br> sudo docker create -it ImageName:tag<br> sudo docker start ContainerID<br> or<br> sudo docker run  </p><p> 守护状态运行<br> sudo docker run -d ImageName:tag</p></li></ul><ul><li><p>终止容器<br>  停止容器<br>  sudo docker stop ContainerID   </p><p>  重启容器<br>  -t 分配一个伪终端<br>  -i 让容器的标准输入保持打开<br>  sudo docker restart ContainerID  </p></li><li><p>进入容器<br>  sudo docker attach ContainerID or ContainerName<br>  sudo docker exec -ti ContainerID  /bin/bash</p></li><li><p>删除容器<br>  -f  强行终止并删除容器<br>  -l  删除容器的连接但是保留容器<br>  -v  删除容器挂在的数据卷<br>  sudo rm   ContainerID  </p></li><li><p>导入到处容器<br>  导出容器<br>  sudo docker  export  ContainerID    &gt;   ExportName.tar    </p><p>  导入容器<br>  cat ImportName.tar | sudo docker import - ContainerName  </p><p>  <code>容器的导入导出与镜像导入导出相似，不同点是，通过容器导入的， 会保存操作的快照，镜像的导入是一个初始化的干净的系统</code></p></li></ul><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/8addd63e/](http://blog.hiphopcoder.com/2016/8addd63e/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Docker/">Docker</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/docker/">docker</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/8addd63e/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git-SmartGit License过期重置</title>
      <link>http://blog.hiphopcoder.com/2016/9c3f4c9e/</link>
      <guid>http://blog.hiphopcoder.com/2016/9c3f4c9e/</guid>
      <pubDate>Sat, 09 Jul 2016 07:20:04 GMT</pubDate>
      
      <description>SmartGit 是java一个跨平的Git图形化界面
一般使用期限为30天,当使用期限到期后，可以通过删除配置文件重置license时长

Windows： %APPDATA%\syntevo\SmartGit\Version
OS X：    ~/Library/Preferences/SmartGit/Version
Unix/Linux：  ~/.smartgit/Version


如上所示路径，Version 为SmartGit 的版本号，进入相应的文件夹后删除setting.xml 文件之后即可重置

作者：卡尔西 
本文地址： [http://blog.hiphopcoder.com/2016/9c3f4c9e/](http://blog.hiphopcoder.com/2016/9c3f4c9e/) 
如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!
但管努力，莫问前程，事在人为，功不唐捐 ~</description>
      
      
      
      <content:encoded><![CDATA[<p>SmartGit 是java一个跨平的Git图形化界面<br>一般使用期限为30天,当使用期限到期后，可以通过删除配置文件重置license时长</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Windows： %APPDATA%\syntevo\SmartGit\Version</span><br><span class="line">OS X：    ~<span class="regexp">/Library/</span>Preferences<span class="regexp">/SmartGit/</span>Version</span><br><span class="line">Unix<span class="regexp">/Linux：  ~/</span>.smartgit/Version</span><br></pre></td></tr></table></figure><p>如上所示路径，<code>Version</code> 为SmartGit 的版本号，进入相应的文件夹后删除<code>setting.xml</code> 文件之后即可重置</p><span id="more"></span><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/9c3f4c9e/](http://blog.hiphopcoder.com/2016/9c3f4c9e/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Git/">Git</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/git/">git</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/9c3f4c9e/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Jenkins Mac系统清理卸载</title>
      <link>http://blog.hiphopcoder.com/2016/dba10aa3/</link>
      <guid>http://blog.hiphopcoder.com/2016/dba10aa3/</guid>
      <pubDate>Mon, 04 Jul 2016 10:56:31 GMT</pubDate>
      
      <description>q
在Mac 上Jenkins 有独特的pkg包，安装完后会默认启动，参考网上的方法整理下：

/Library/Application Support/Jenkins/Uninstall.command  


或

sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist  
sudo rm !$  
sudo rm -rf /Applications/Jenkins &quot;/Library/Application Support/Jenkins&quot; /Library/Documentation/Jenkins  
sudo rm -rf /Users/Shared/Jenkins  
# if you want to get rid of all the jobs and builds:  
sudo dscl . -delete /Userskkkkk/
# delete the jenkins user and group (if you chose to use them):  
sudo dscl . -</description>
      
      
      
      <content:encoded><![CDATA[<p>q<br>在Mac 上Jenkins 有独特的pkg包，安装完后会默认启动，参考网上的方法整理下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Library/Application Support/Jenkins/Uninstall.command  </span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist  </span><br><span class="line">sudo rm !$  </span><br><span class="line">sudo rm -rf /Applications/Jenkins &quot;/Library/Application Support/Jenkins&quot; /Library/Documentation/Jenkins  </span><br><span class="line">sudo rm -rf /Users/Shared/Jenkins  </span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> you want to get rid of all the <span class="built_in">jobs</span> and builds:</span>  </span><br><span class="line">sudo dscl . -delete /Userskkkkk/</span><br><span class="line"><span class="meta">#</span><span class="bash"> delete the jenkins user and group (<span class="keyword">if</span> you chose to use them):</span>  </span><br><span class="line">sudo dscl . -delete /Groups/jenkins  </span><br></pre></td></tr></table></figure><span id="more"></span><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/dba10aa3/](http://blog.hiphopcoder.com/2016/dba10aa3/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Jenkins/">Jenkins</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/ci/">ci</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/dba10aa3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Jquery_Ajax传输list</title>
      <link>http://blog.hiphopcoder.com/2016/353a0179/</link>
      <guid>http://blog.hiphopcoder.com/2016/353a0179/</guid>
      <pubDate>Wed, 29 Jun 2016 16:00:00 GMT</pubDate>
      
      <description>Jquery 使用Ajax 向后台传输list
在前端后台数据交互的时候，经常会用的Ajax 交互数据,当使用Ajax向后台提交数组的时候，就需要对数组数据进行一个序列话：
例如:

$.ajax(url, {
   url: &quot;XXXXX&quot;
   type: &quot;post&quot;
   data : {list= [1,2,3] },
}));
//查看网络信息会发现传过去的值为 list[]=1&amp;list[]=2&amp;list[]=3
//传输的值都多加了一个[]


修改如下：

$.ajax(url, {
   url: &quot;XXXXX&quot;
   type: &quot;post&quot;
   data : {list= [1,2,3] },
   traditional : true
}));
//查看网络信息会发现传过去的值为 list=1&amp;list=2&amp;list=3


查看官方的方法说道：


http://api.jquery.com/jQuery.Ajax/#jQuery-ajax-settings

作者：卡尔西 
本文地址： [http://blog.hiphopcoder.com/2016/</description>
      
      
      
      <content:encoded><![CDATA[<h2><span id="jquery-使用ajax-向后台传输list">Jquery 使用Ajax 向后台传输list</span></h2><p>在前端后台数据交互的时候，经常会用的Ajax 交互数据,当使用Ajax向后台提交数组的时候，就需要对数组数据进行一个序列话：<br>例如:</p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">$.ajax(url, &#123;</span><br><span class="line">   url: <span class="string">&quot;XXXXX&quot;</span></span><br><span class="line">   type: <span class="string">&quot;post&quot;</span></span><br><span class="line">   data : &#123;list= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;,</span><br><span class="line">&#125;));</span><br><span class="line">//查看网络信息会发现传过去的值为 list[]=<span class="number">1</span>&amp;list[]=<span class="number">2</span>&amp;list[]=<span class="number">3</span></span><br><span class="line">//传输的值都多加了一个[]</span><br></pre></td></tr></table></figure><!--  more --><p>修改如下：</p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">$.ajax(url, &#123;</span><br><span class="line">   url: <span class="string">&quot;XXXXX&quot;</span></span><br><span class="line">   <span class="class"><span class="keyword">type</span>: &quot;post&quot;</span></span><br><span class="line">   <span class="class"><span class="keyword">data</span> : &#123;<span class="title">list</span>= [1,2,3] &#125;,</span></span><br><span class="line">   traditional : true</span><br><span class="line">&#125;));</span><br><span class="line">//查看网络信息会发现传过去的值为 list=<span class="number">1</span>&amp;list=<span class="number">2</span>&amp;list=<span class="number">3</span></span><br></pre></td></tr></table></figure><p>查看官方的方法说道：<br><img src="https://hexo-ali.oss-cn-beijing.aliyuncs.com/jquery_ajax.png"></p><p><a href="http://api.jquery.com/jQuery.Ajax/#jQuery-ajax-settings">http://api.jquery.com/jQuery.Ajax/#jQuery-ajax-settings</a></p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/353a0179/](http://blog.hiphopcoder.com/2016/353a0179/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Jquery/">Jquery</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/353a0179/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kali 装机必备软件</title>
      <link>http://blog.hiphopcoder.com/2016/b1e483f5/</link>
      <guid>http://blog.hiphopcoder.com/2016/b1e483f5/</guid>
      <pubDate>Mon, 02 May 2016 07:31:37 GMT</pubDate>
      
      <description>kali安装后需要现配置镜像源：
添加kali镜像源

安装flashPlayer

apt-get install flashplugin-nonfree
update-flashplugin-nonfree --install


安装新立得

apt-get install synaptic                   


安装 deb 图形化安装工具

apt-get install gdebi                   


汉化icewease

apt-get install iceweasel-l10n-zh-cn


安装多窗口终端

apt-get install terminator  


推荐些gnome-shell主题：

saydam

Moka


图标推荐
Numix

作者：卡尔西 
本文地址： [http://blog.hiphopcoder.com/2016/b1e483f5/](http://blog.hiphopcoder.com/2016/b1e483f5/) 
如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者</description>
      
      
      
      <content:encoded><![CDATA[<p>kali安装后需要现配置镜像源：<br><a href="http://blog.rapcoder.com/2015/11/13/Kali%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90-%E4%BB%A5%E5%8F%8APD-Tools-Vm-Tools%E7%9A%84%E5%AE%89%E8%A3%85/">添加kali镜像源</a></p><p><code>安装flashPlayer</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install flashplugin-nonfree</span><br><span class="line">update-flashplugin-nonfree --install</span><br></pre></td></tr></table></figure><p><code>安装新立得</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install synaptic                   </span><br></pre></td></tr></table></figure><p><code>安装 deb 图形化安装工具</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install gdebi                   </span><br></pre></td></tr></table></figure><p><code>汉化icewease</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install iceweasel-l10n-zh-cn</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>安装多窗口终端</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install terminator  </span><br></pre></td></tr></table></figure><p>推荐些gnome-shell主题：</p><p><a href="http://gnome-look.org/content/show.php/Saydam?content=153171">saydam</a><br><br><a href="http://gnome-look.org/content/show.php/Moka+Gourmet?content=168806">Moka</a><br></p><p>图标推荐<br><a href="https://github.com/numixproject/numix-icon-theme-circle">Numix</a></p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/b1e483f5/](http://blog.hiphopcoder.com/2016/b1e483f5/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Linux/">Linux</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/linux/">linux</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/b1e483f5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kali 添加PPA repository</title>
      <link>http://blog.hiphopcoder.com/2016/8491ecd5/</link>
      <guid>http://blog.hiphopcoder.com/2016/8491ecd5/</guid>
      <pubDate>Tue, 26 Apr 2016 11:54:10 GMT</pubDate>
      
      <description>Kali 是基于Debian,想要使用类似于Ubuntu的PPA库就必须自己添加了，网上也有很多类似，这里重点说下step

 1. 安装python包apt-get install python-software-properties
    apt-get install apt-file
    apt-file update
    
    
    执行 apt-file search add-apt-repository 能够看到 software-properties: /usr/bin/add-apt-repository
    software-properties: /usr/share/man/man1/add-apt-repository.1.gz
    
    
    

 2. 添加 add-apt-repository 库文件cd /usr/sbin
    vi add-apt-repository
    
    
    添加如下的代码:  #!/bin/bash
    if [ $# -eq 1 ]
    NM=`uname -a </description>
      
      
      
      <content:encoded><![CDATA[<p>Kali 是基于Debian,想要使用类似于Ubuntu的PPA库就必须自己添加了，网上也有很多类似，这里重点说下step</p><ol><li>安装python包<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install <span class="keyword">python</span>-software-properties</span><br><span class="line">apt-<span class="built_in">get</span> install apt-<span class="keyword">file</span></span><br><span class="line">apt-<span class="keyword">file</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure>执行 <strong>apt-file search add-apt-repository</strong> 能够看到  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">software-properties: <span class="regexp">/usr/</span>bin/add-apt-repository</span><br><span class="line">software-properties: <span class="regexp">/usr/</span>share<span class="regexp">/man/m</span>an1/add-apt-repository.<span class="number">1</span>.gz</span><br></pre></td></tr></table></figure></li></ol>  <span id="more"></span><ol start="2"><li>添加 add-apt-repository 库文件<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /usr/sbin</span><br><span class="line"><span class="keyword">vi</span> <span class="built_in">add</span>-apt-repository</span><br></pre></td></tr></table></figure>添加如下的代码:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  <span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 1 ]</span><br><span class="line">NM=`uname -a &amp;&amp; date`</span><br><span class="line">NAME=`<span class="built_in">echo</span> <span class="variable">$NM</span> | md5sum | cut -f1 -d<span class="string">&quot; &quot;</span>`</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  ppa_name=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> | cut -d<span class="string">&quot;:&quot;</span> -f2 -s`</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$ppa_name</span>&quot;</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;PPA name not found&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Utility to add PPA repositories in your debian machine&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span> ppa:user/ppa-name&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ppa_name</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;deb http://ppa.launchpad.net/<span class="variable">$ppa_name</span>/ubuntu xenial main&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">    apt-get update &gt;&gt; /dev/null 2&gt; /tmp/<span class="variable">$&#123;NAME&#125;</span>_apt_add_key.txt</span><br><span class="line">    key=`cat /tmp/<span class="variable">$&#123;NAME&#125;</span>_apt_add_key.txt | cut -d<span class="string">&quot;:&quot;</span> -f6 | cut -d<span class="string">&quot; &quot;</span> -f3`</span><br><span class="line">    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys <span class="variable">$key</span></span><br><span class="line">    rm -rf /tmp/<span class="variable">$&#123;NAME&#125;</span>_apt_add_key.txt</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Utility to add PPA repositories in your debian machine&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span> ppa:user/ppa-name&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>Ps:</li></ol><p><strong>这里重点说下，代码里面xenial  这个相当于是远程库的版本号,这个版本库具体可以参考，选择你需要的</strong></p><p>  修改文件的权限<br>  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod o+x <span class="regexp">/usr/</span>sbin/add-apt-repository</span><br><span class="line">chown root:root <span class="regexp">/usr/</span>sbin/add-apt-repository</span><br></pre></td></tr></table></figure><br>3. 之后就可以添加你的ppa库了,使用/usr/sbin/add-apt-repository,例如<br>    <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/usr/sbin/add-apt-repository ppa:xxxx/xxxx</span><br><span class="line">apt-<span class="builtin-name">get</span> update</span><br><span class="line">apt-<span class="builtin-name">get</span> upgrade</span><br><span class="line">apt-<span class="builtin-name">get</span> dist-upgrade</span><br></pre></td></tr></table></figure></p><p>至此全部完成，欢迎交流</p><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/8491ecd5/](http://blog.hiphopcoder.com/2016/8491ecd5/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Linux/">Linux</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/linux/">linux</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/8491ecd5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kali U盘安装无法挂载CDRom</title>
      <link>http://blog.hiphopcoder.com/2016/53d626f/</link>
      <guid>http://blog.hiphopcoder.com/2016/53d626f/</guid>
      <pubDate>Tue, 26 Apr 2016 11:38:36 GMT</pubDate>
      
      <description>kali如果使用U盘安装在安装的过程中，可能会提示“Your installation CD-ROM couldn‘t be mounted”
告诉CDRom无法挂载，请检查

这是因为当使用U盘启动安装系统的时候,挂载的CDRom的挂载点已经被U盘所占用，所以导致无法挂载CDRom

返回到安装界面可以看到 执行shell 取消挂载就行了

 1. 执行 df -m 
    
    看到类似 /dev/xxx /media
    
    
 2. 执行 umount /media 
    
    取消挂载点
    
    
 3. 执行 exit 返回之前界面，继续安装即可
    
    

作者：卡尔西 
本文地址： [http://blog.hiphopcoder.com/2016/53d626f/](http://blog.hiphopcoder.com/2016/53d626f/) 
如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!
但管努力，莫问前程，事在人为，功不唐捐 ~</description>
      
      
      
      <content:encoded><![CDATA[<p>kali如果使用U盘安装在安装的过程中，可能会提示“Your installation CD-ROM couldn‘t be mounted”<br>告诉CDRom无法挂载，请检查</p><p><strong>这是因为当使用U盘启动安装系统的时候,挂载的CDRom的挂载点已经被U盘所占用，所以导致无法挂载CDRom</strong></p><p>返回到安装界面可以看到 执行shell 取消挂载就行了</p><span id="more"></span><ol><li><p>执行 df -m <br><br>看到类似 /dev/xxx  /media</p></li><li><p>执行 umount /media <br><br>取消挂载点</p></li><li><p>执行 exit  返回之前界面，继续安装即可</p></li></ol><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/53d626f/](http://blog.hiphopcoder.com/2016/53d626f/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Linux/">Linux</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/linux/">linux</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/53d626f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux 双击应用图标没有反应</title>
      <link>http://blog.hiphopcoder.com/2016/98e3cb7b/</link>
      <guid>http://blog.hiphopcoder.com/2016/98e3cb7b/</guid>
      <pubDate>Tue, 26 Apr 2016 11:23:41 GMT</pubDate>
      
      <description>在linux下安装完应用程序后双击没有反应，出现这种情况一般是两种原因

 1. 应用程序禁止使用root用户启动程序,新建一个其他用户即可
    
    
 2. 缺少组件
    
    apt-get install ibappindicator3-1
    
    

 之后双击就可以启动程序了

作者：卡尔西 
本文地址： [http://blog.hiphopcoder.com/2016/98e3cb7b/](http://blog.hiphopcoder.com/2016/98e3cb7b/) 
如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!
但管努力，莫问前程，事在人为，功不唐捐 ~</description>
      
      
      
      <content:encoded><![CDATA[<p>在linux下安装完应用程序后双击没有反应，出现这种情况一般是两种原因</p><ol><li><p>应用程序禁止使用root用户启动程序,新建一个其他用户即可</p></li><li><p>缺少组件</p><blockquote><p>apt-get install ibappindicator3-1</p></blockquote></li></ol><p>  之后双击就可以启动程序了</p><span id="more"></span><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/98e3cb7b/](http://blog.hiphopcoder.com/2016/98e3cb7b/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Linux/">Linux</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/linux/">linux</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/98e3cb7b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kali 网络设置</title>
      <link>http://blog.hiphopcoder.com/2016/5fe952ff/</link>
      <guid>http://blog.hiphopcoder.com/2016/5fe952ff/</guid>
      <pubDate>Tue, 26 Apr 2016 11:16:09 GMT</pubDate>
      
      <description>Kali安装PPTP vpn 支持模块
前提已经更新过系统镜像

sudo apt-get install pptpd
sudo apt-get install network-manager-openvpn
sudo apt-get install network-manager-openvpn-gnome
sudo apt-get install network-manager-pptp
sudo apt-get install network-manager-pptp-gnome
sudo apt-get install network-manager-strongswan
sudo apt-get install network-manager-vpnc
sudo apt-get install network-manager-vpnc-gnome
sudo apt-get install l2tp-ipsec-vpn


显示设备未托管
解决办法就是找到/etc/NetworkManager/NetworkManager.conf
把最后一行的managed=false改为m</description>
      
      
      
      <content:encoded><![CDATA[<h4><span id="kali安装pptp-vpn-支持模块">Kali安装PPTP vpn 支持模块</span></h4><p><strong>前提已经更新过系统镜像</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pptpd</span><br><span class="line">sudo apt-get install network-manager-openvpn</span><br><span class="line">sudo apt-get install network-manager-openvpn-gnome</span><br><span class="line">sudo apt-get install network-manager-pptp</span><br><span class="line">sudo apt-get install network-manager-pptp-gnome</span><br><span class="line">sudo apt-get install network-manager-strongswan</span><br><span class="line">sudo apt-get install network-manager-vpnc</span><br><span class="line">sudo apt-get install network-manager-vpnc-gnome</span><br><span class="line">sudo apt-get install l2tp-ipsec-vpn</span><br></pre></td></tr></table></figure><span id="more"></span><p>显示设备未托管<br>解决办法就是找到/etc/NetworkManager/NetworkManager.conf<br>把最后一行的managed=false改为managed=true</p><hr><div class="copyright">作者：卡尔西  <br><span>本文地址： [http://blog.hiphopcoder.com/2016/5fe952ff/](http://blog.hiphopcoder.com/2016/5fe952ff/) </span><br> 如果本文对你有帮助，欢迎微信,QQ联系,复制转载请注明作者和原文链接，谢谢!<br> 但管努力，莫问前程，事在人为，功不唐捐 ~  </div><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"6411498ca0e1db0a6d9b","clientSecret":"4499d5aed4c7a9243ef68a8209356325ba830493","repo":"HexoComments","owner":"HipHopCoderS","admin":"HipHopCoderS","distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content:encoded>
      
      
      <category domain="http://blog.hiphopcoder.com/categories/Linux/">Linux</category>
      
      
      <category domain="http://blog.hiphopcoder.com/tags/linux/">linux</category>
      
      
      <comments>http://blog.hiphopcoder.com/2016/5fe952ff/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
